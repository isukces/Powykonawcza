using Newtonsoft.Json;
using Powykonawcza.Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace Powykonawcza
{
    /// <summary>
    /// Interaction logic for SzablonyImportu.xaml<!--AutoGeneratedColumns="gr1_AutoGeneratedColumns" -->
    /// </summary>
    public partial class SzablonyImportu : Window
    {
        private ObservableCollection<SzablonItem> l = new ObservableCollection<SzablonItem>();
        public SzablonyImportu()
        {
            InitializeComponent();
            populateSzablon();
            //this.gr1.ItemsSource = l;
            //
            gr1.AutoGenerateColumns = true;
            //gr1.Columns.Add(new DataGridColumn(  ) );
            CollectionViewSource itemCollectionViewSource;
            itemCollectionViewSource = (CollectionViewSource)(FindResource("ItemCollectionViewSource"));
            itemCollectionViewSource.Source = l;
        }

        private void Window_Activated(object sender, EventArgs e)
        {
            
        }

        private ObservableCollection<SzablonItem> populateSzablon()
        {
            //string s = Resource1.SzablonImportu;
            //Resource1.SzablonImportu. = "dddddddd";

            IFormatter formatter = new BinaryFormatter();
            
            try
            {
                l.Clear();
                Stream streamIn = new FileStream(@"SzablonImportu.dat", FileMode.Open, FileAccess.Read);
                l = (ObservableCollection<SzablonItem>)formatter.Deserialize(streamIn);
                streamIn.Close();
                return l;
            }
            catch
            {
                l.Add(new SzablonItem() { nazwa = "pkt", import = true, Inne = "numer Punktu" });
                l.Add(new SzablonItem() { nazwa = "x", import = true, Inne = "współrzędna X" });
                l.Add(new SzablonItem() { nazwa = "y", import = true, Inne = "współrzędna Y" });
                l.Add(new SzablonItem() { nazwa = "z", import = true, Inne = "wysokość H" });
                l.Add(new SzablonItem() { nazwa = "data", import = false, Inne = "data pomiaru" });
                l.Add(new SzablonItem() { nazwa = "kod", import = false, Inne = "" });
                l.Add(new SzablonItem() { nazwa = "mn", import = false, Inne = "" });
                l.Add(new SzablonItem() { nazwa = "mh", import = false, Inne = "" });
                l.Add(new SzablonItem() { nazwa = "mp", import = false, Inne = "" });
                l.Add(new SzablonItem() { nazwa = "e", import = false, Inne = "" });
                l.Add(new SzablonItem() { nazwa = "sat", import = false, Inne = "" });
                l.Add(new SzablonItem() { nazwa = "pdop", import = false, Inne = "" });
                l.Add(new SzablonItem() { nazwa = "wys_tyczki", import = false, Inne = "" });
                l.Add(new SzablonItem() { nazwa = "typ", import = false, Inne = "" });
            }


         

            return l;
        }

        private void MenuItem_Click(object sender, RoutedEventArgs e)
        {

        }

        private void MenuItem_Click_1(object sender, RoutedEventArgs e)
        {

        }

        private void SaveSzablon()
        {
            //  IFormatter formatter = new BinaryFormatter();
            IFormatter formatterOut = new BinaryFormatter();
            Stream stream = new FileStream(@"SzablonImportu.dat", FileMode.Create, FileAccess.Write);
            formatterOut.Serialize(stream, l);
            stream.Close();
        }


        private void MenuItem_Clickup(object sender, RoutedEventArgs e)
        {
            //Get the clicked MenuItem
            var menuItem = (MenuItem)sender;

            //Get the ContextMenu to which the menuItem belongs
            var contextMenu = (ContextMenu)menuItem.Parent;

            //Find the placementTarget
            var item = (DataGrid)contextMenu.PlacementTarget;

            //Get the underlying item, that you cast to your object that is bound
            //to the DataGrid (and has subject and state as property)
            var itm = (SzablonItem)item.SelectedCells[0].Item;

            //int lp=l.Find((x => x.nazwa.Contains(itm.nazwa))).;
            for (int i = 0; i < l.Count; i++)
            {
                if (l[i].nazwa == itm.nazwa)
                {
                    if (i > 0)
                    {
                        var szp = l[i - 1];
                        var szk = l[i];
                        l[i] = szp;
                        l[i - 1] = szk;
                        gr1.ItemsSource = null;
                        gr1.ItemsSource = l;
                    }
                    break;
                }
            }
        }

        private void MenuItem_Clickdown(object sender, RoutedEventArgs e)
        {
            //Get the clicked MenuItem
            var menuItem = (MenuItem)sender;

            //Get the ContextMenu to which the menuItem belongs
            var contextMenu = (ContextMenu)menuItem.Parent;

            //Find the placementTarget
            var item = (DataGrid)contextMenu.PlacementTarget;

            //Get the underlying item, that you cast to your object that is bound
            //to the DataGrid (and has subject and state as property)
            var itm = (SzablonItem)item.SelectedCells[0].Item;

            //int lp=l.Find((x => x.nazwa.Contains(itm.nazwa))).;
            for (int i = 0; i < l.Count; i++)
            {
                if (l[i].nazwa == itm.nazwa)
                {
                    if (i < l.Count-1)
                    {
                        var szp = l[i + 1];
                        var szk = l[i];
                        l[i] = szp;
                        l[i + 1] = szk;
                        gr1.ItemsSource = null;
                        gr1.ItemsSource = l;
                    }
                    break;
                }
            }
        }

        private void gr1_AutoGeneratedColumns(object sender, EventArgs e)
        {
            gr1.Columns[0].IsReadOnly = true;
            gr1.Columns[2].IsReadOnly = true;
        }

     


        private void clik_zapisz(object sender, RoutedEventArgs e)
        {
            SaveSzablon();

            for (int i = 0; i < l.Count; i++)
            {
                Console.WriteLine(l[i].import);
            }

            string json = JsonConvert.SerializeObject(l, Formatting.Indented);
            
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {

        }
    }
}
